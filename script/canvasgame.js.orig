//общие глобальные переменные
var lastTime;
var gameTime = 0;
var canvas;
var bossHP = 1;
var ctx;
var level = 1;
var max = 100;
var nextLevelTimer;
var score = 0;
var lastPlay = -72000;
var speedTime = 0;
var bossWay = 1;//1-вверх 0-вниз
var timerOfBoss = 0;
var W = window.innerWidth * 0.95;//ширина окна
var H = window.innerHeight * 0.82;//высота окна
var timerOfImmortal = 0;
var timeOfGod = 5000; //сколько длится бессмертие
var timeToBoss = 3;//сколько секунд до босса
var lastBossEnemy = Date.now();
var audio3 = new Audio(); // Создаём новый элемент Audio
var GameOver = false;
var lastFire = Date.now();
var lastExplosion = Date.now();
var lastPause = Date.now();
var lastFireBoss = Date.now();
var lastSonyaSound = Date.now();

var c = document.querySelector("#music");

//картинки
var background = new Image();
var background2 = new Image();
var loserScreen = new Image();
var sprites = new Image();
var level1Img = new Image();
var level2Img = new Image();
var level3Img = new Image();
var pauseImg = new Image();
var backSound = new Audio();
var immortalImg = new Image();
var bombImg = new Image();
var cowEnemy = new Image();
var nextLevelPlayerMove = false;

//массивы объектов
var enemies = [];
var bullets = [];
var bossBullets = [];
var pauseScreen = [];
var explosions = [];
var clouds = [];
var boss = [];
var pause = false;
var hitPoints = [];
var bossHitPoints = [];
var bombs = [];
var blackPonies = [];
var bgScreens = [];
var godBonuses = [];

//скорости
var playerSpeed = 400;          //скорость игрока
var backgroundSpeed = 150;
var enemySpeed = 200;          //скорость врагов
var bulletSpeed = 1500;         //скорость пуль
var bossBulletSpeed = 1200;
var cloudSpeed = 800;             // скорость облачков
var ponySpeed = 600;             //скорость черных поней


//проверки
var bossTime = false;//Наступило время выхода босса
var bossInPosition = false;//Босс перешел в атаку
var bossLifesGain = false;//Получение боссом набора хпшек
var nextLevelPause = false;
var isGameOver = false;             //проверка кончилась игра или нет
var isPlayerGod = false;


function start() {
    canvas = document.getElementById("myCanvas");
    ctx = canvas.getContext("2d");
    ctx.fillStyle = "#FFF";
    ctx.strokeStyle = "#FFF";
    ctx.font = "italic 220pt Comic Sans MS";
    canvas.width = W
    canvas.height = H
    var browser = navigator.userAgent;
    if (browser == "mozilla") alert("МОЗИЛЛА");
    ctx.scale(W / 1200, H / 620);
    background.onload = function () {
        init();
    }
    background.src = "resources/bg2.png";
    pauseImg.src = "resources/pauseScr.png";
    background2.src = "resources/ponyBackground.png";
    loserScreen.src = "resources/Youlose.png";
    sprites.src = "resources/sprite.png";
    bombImg.src = "resources/bomb.png";
    backSound.src = "resources/bSound.mp3";
    level1Img.src = "resources/levelchange1.png";
    level2Img.src = "resources/levelchange2.png";
    level3Img.src = "resources/levelchange3.png";
    immortalImg.src = "resources/immortal.png";
    cowEnemy.src = "resources/cowEnemy.png";

}
var requestAnimFrame = (function () {
    return window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function (callback) {
            window.setTimeout(callback, 1000 / 120);
        };
})();
// объект игрок

var player = {
    pos: [150, 150],
    sprite: new Sprite(sprites, [80, 80], [80, 80])
};

for (var j = 0; j < 2; j++) {//фоны
    bgScreens.push({
        pos: [0 + 2400 * j, 0],
        sprite: new Sprite(background, [0, 0], [2400, 620])
    })
}
;

for (var j = 0; j < 3; j++) {
    hitPoints.push({
        pos: [20 + 40 * j, 10],
        sprite: new Sprite(sprites, [0, 200], [40, 40])
    })
}
for (var j = 0; j < 3; j++) {
    bombs.push({
        pos: [500 + 50 * j, 10],
        sprite: new Sprite(bombImg, [0, 0], [80, 80])
    })
}

function init() {
    ctx.drawImage(background, 0, 0, 1200, 620);
    lastTime = Date.now();
    main();
}
function main() {
    var now = Date.now();
    var dt = (now - lastTime) / 1000.0;
    update(dt);
    render();
    lastTime = now;
    requestAnimFrame(main);
};
function wildSonyaScream(n) {
    // if (c.checked == true) {
    var audio = new Audio(); // Создаём новый элемент Audio

    audio.src = 'resources/wildSounds/' + n + '.wav'; // Указываем путь к звуку "клика"
    audio.autoplay = true; // Автоматически запускаем
    // }


}
// ядро по сути
function update(dt) {
    gameTime += dt;
    handleInput(dt);
    if (nextLevelPause) {
        if (Date.now() - nextLevelTimer > 5000) {
            nextLevelPause = false;
        }
    }

    if (Date.now() - timerOfImmortal > timeOfGod) {
        isPlayerGod = false;
        player.sprite = new Sprite(sprites, [80, 80], [80, 80]);
    }

    if (!pause) {
        updateEntities(dt);
    }
    ;

    if ((!isGameOver) && (Date.now() - lastSonyaSound > 6000)) {

        var a = Math.floor(Math.random() * (19 - 1)) + 1;
        wildSonyaScream(a);
        lastSonyaSound = Date.now();
    }


    if ((!pause) && (!nextLevelPause)) {


        if ((Date.now() - speedTime > 10000) && (max >= 11)) {
            speedTime = Date.now();
            max -= 5;
        }
        a = Math.floor(Math.random() * (max - 1 + 1)) + 1;
        if (!bossTime) {
            if (a == 1) {
                enemies.push({
                    pos: [1200,
                            Math.random() * (620 - 85) + 45 ],
                    sprite: new Sprite(sprites, [40, 0], [120, 40]) });
            }
            var max2 = 1000;
            var godBonusesLimit = 500;
            a = Math.floor(Math.random() * (max2 - 1 + 1)) + 1;
            godBonusesFrequency = Math.floor(Math.random() * godBonusesLimit) + 1;
            if (a == 1) {
                clouds.push({
                    pos: [1200,
                            Math.random() * (620 - 240) + 120],
                    sprite: new Sprite(sprites, [160, 80], [160, 120]) });
            }
            if (a == 1) {
                blackPonies.push({
                    pos: [1200,
                            Math.random() * (620 - 140) + 160],
                    sprite: new Sprite(sprites, [160, 0], [120, 40]) });
            }
            if (godBonusesFrequency == 1) {
                godBonuses.push({
                    pos: [1200,
                            Math.random() * (canvas.height - 140) + 160],
                    sprite: new Sprite(sprites, [80, 200], [120, 40]) });
            }
        }
        if ((gameTime - timerOfBoss > timeToBoss) && (boss.length < 1) && (enemies.length == 0) && (blackPonies.length == 0)) {
            timerOfBoss = gameTime
            bossTime = true;

            if (level == 1) {
                boss.push({
                    pos: [1200,
                        (310)],
                    sprite: new Sprite(sprites, [320, 80], [200, 160]) });
            }
            else if (level == 2) {
                boss.push({
                    pos: [1200,
                        (310)],
                    sprite: new Sprite(sprites, [320, 240], [200, 160]) });
            }
            else if (level == 3) {
                boss.push({
                    pos: [1200,
                        (310)],
                    sprite: new Sprite(sprites, [315, 400], [205, 185]) });
            }
            else {
                boss.push({
                    pos: [1200,
                        (310)],
                    sprite: new Sprite(sprites, [540, 350], [205, 185]) });
            }
        }
        if ((!isGameOver) && (bossInPosition) && (Date.now() - lastFireBoss > 500)) { //босс делает пеу пеу
            var x = boss[0].pos[0] - 5;
            var y = boss[0].pos[1] + 100;
            if (level == 1) {
                bossBullets.push({ pos: [x, y],
                    dir: 'forward',
                    sprite: new Sprite(sprites, [0, 165], [40, 20]) });
            }
            else if (level == 2) {
                bossBullets.push({ pos: [x, y],
                    dir: 'forward',
                    sprite: new Sprite(sprites, [0, 240], [140, 20]) });
            }
            else if (level == 3) {
                bossBullets.push({ pos: [x, y],
                    dir: 'forward',
                    sprite: new Sprite(sprites, [0, 240], [140, 20]) });

            }
            BulletSound();
            lastFireBoss = Date.now();
        }
        if ((!isGameOver) && (bossInPosition) && (Date.now() - lastBossEnemy > 3000) && (level == 3)) {
            enemies.push({
                pos: [canvas.width,
                        Math.random() * (620 - 85) + 45 ],
                sprite: new Sprite(cowEnemy, [0, 0], [160, 90]) });
            lastBossEnemy = Date.now();
        }


        if ((bossInPosition) && (!bossLifesGain)) {//добавляем боссу хп по прибытию на позицию
            bossLifesGain = true;
            for (var j = 0; j < bossHP; j++) {
                bossHitPoints.push({
                    pos: [1050 - 40 * j, 550],
                    sprite: new Sprite(sprites, [40, 200], [40, 40])})
            }
        }
    }
    // backgroundSound();
    checkCollisions();
};
function explosFunct(pos1, pos2) {
    explSound();
    explosions.push({
        pos: [pos1, pos2],
        sprite: new Sprite(sprites,
            [5, 40],
            [39, 39],
            16,
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
            null,
            true)
    });
};
//обработка клавиш
function handleInput(dt) {
    if ((!nextLevelPause) || (!nextLevelPlayerMove)) {
        if (input.isDown('PAUSE') &&
            (!isGameOver) &&
            Date.now() - lastPause > 250) {
            if (!pause) {
                pauseScreen.push({
                    pos: [0, 0],
                    sprite: new Sprite(pauseImg, [0, 0], [1200, 620])})
                pause = true;
            }
            else {
                pause = false;
                pauseScreen.pop();
            }
            lastPause = Date.now();

        }
        if (!pause) {
            if (input.isDown('DOWN') || input.isDown('s')) {
                player.pos[1] += playerSpeed * dt;
            }
            if (input.isDown('UP') || input.isDown('w')) {
                player.pos[1] -= playerSpeed * dt;
            }
            if (input.isDown('RIGHT') || input.isDown('d')) {
                player.pos[0] += playerSpeed * dt;
            }
            if (input.isDown('LEFT') || input.isDown('a')) {
                player.pos[0] -= playerSpeed * dt;
            }
            if (input.isDown('SPACE') &&
                (!isGameOver) &&
                Date.now() - lastFire > 250) {
                var x = player.pos[0] + player.sprite.size[0] / 2 + 25;
                var y = player.pos[1] + player.sprite.size[1] / 2 - 20;
                bullets.push({ pos: [x, y],
                    dir: 'forward',
                    sprite: new Sprite(sprites, [0, 0], [20, 30]) });
                BulletSound();
                lastFire = Date.now();
            }
            if (input.isDown('ENTER') &&//подрыв бомб
                (!isGameOver) && (!bossInPosition) && (bombs.length > 0) &&
                Date.now() - lastExplosion > 250) {
                bombs.pop();
                for (var i = 0; i < enemies.length; i++) {

                    explosFunct(enemies[i].pos[0], enemies[i].pos[1])
                    score += 100;
                    document.getElementById('sc').innerHTML = score;
                    enemies.splice(i, 1);
                    i--;
                }
                lastExplosion = Date.now()

            }
            else if (input.isDown('ENTER') &&//подрыв бомб
                (isGameOver)) {
                isGameOver = false;
                lastExplosion = Date.now()
                restart();


            }
        }
    }
}

//touch
var initialPoint;
var finalPoint;
document.addEventListener('touchstart', function (event) {
    event.preventDefault();
    event.stopPropagation();
    initialPoint = event.changedTouches[0];
    if (event.targetTouches.length == 2) {
        if ((!isGameOver) && (!bossInPosition) && (bombs.length > 0) && (Date.now() - lastExplosion > 250)) {
            bombs.pop();
            for (var i = 0; i < enemies.length; i++) {

                explosFunct(enemies[i].pos[0], enemies[i].pos[1])
                score += 100;
                document.getElementById('sc').innerHTML = score;
                enemies.splice(i, 1);
                i--;
            }
            lastExplosion = Date.now()

        }
    }
}, false);
document.addEventListener('touchend', function (event) {
    event.preventDefault();
    event.stopPropagation();
    finalPoint = event.changedTouches[0];
    var xAbs = Math.abs(initialPoint.pageX - finalPoint.pageX);
    var yAbs = Math.abs(initialPoint.pageY - finalPoint.pageY);
    if (xAbs > 20 || yAbs > 20) {
        if (xAbs > yAbs) {
            if (finalPoint.pageX < initialPoint.pageX) {
                player.pos[0] -= playerSpeed * dt;
            }
            else {
                player.pos[0] += playerSpeed * dt;
            }
        }
        else {
            if (finalPoint.pageY < initialPoint.pageY) {
                player.pos[1] -= playerSpeed * dt;
            }
            else {
                player.pos[1] += playerSpeed * dt;
            }
        }
    }
    else {
        if ((!isGameOver) && (Date.now() - lastFire > 250)) {
            var x = player.pos[0] + player.sprite.size[0] / 2 + 25;
            var y = player.pos[1] + player.sprite.size[1] / 2 - 20;
            bullets.push({ pos: [x, y],
                dir: 'forward',
                sprite: new Sprite(sprites, [0, 0], [20, 30]) });
            BulletSound();
            lastFire = Date.now();
        }
    }
}, false);


function BulletSound() {
    if (c.checked == true) {
        var audio = new Audio(); // Создаём новый элемент Audio
        audio.src = 'resources/gun16.wav'; // Указываем путь к звуку "клика"
        audio.autoplay = true; // Автоматически запускаем
    }
}

function explSound() {
    if (c.checked == true) {
        var audio2 = new Audio(); // Создаём новый элемент Audio
        audio2.src = 'resources/Expl.wav'; // Указываем путь к звуку "клика"
        audio2.autoplay = true; // Автоматически запускаем
    }
}


function expl2Sound() {
    if (c.checked == true) {
        var audio4 = new Audio(); // Создаём новый элемент Audio
        audio4.src = 'resources/icq.mp3'; // Указываем путь к звуку "клика"
        audio4.autoplay = true; // Автоматически запускаем
    }
}


function bossMoveFunct1(a, dt) {

    bossInPosition = true;
    if (bossWay == 1) {
        boss[a].pos[1] -= enemySpeed * dt;
    }
    else {
        boss[a].pos[1] += enemySpeed * dt;
    }
}
function bossMoveFunct2(a, dt) {

    bossInPosition = true;
    if (boss[a].pos[1] + 65 > player.pos[1]) {
        boss[a].pos[1] -= (enemySpeed - 100) * dt;
    }
    else {
        boss[a].pos[1] += (enemySpeed - 100) * dt;
    }
}
function updateEntities(dt) {
    if (nextLevelPlayerMove) {
        player.pos[0] += 300 * dt;
    }

    // обновляем анимацию игрока
    player.sprite.update(dt);
//крутим фон
    for (var i = 0; i < 2; i++) {
        bgScreens[i].pos[0] -= backgroundSpeed * dt;
        bgScreens[i].sprite.update(dt);

        // удаляем вылетевших за пределы экрана
        if (bgScreens[i].pos[0] + bgScreens[i].sprite.size[0] < 5) {
            bgScreens[i].pos[0] = 2400;
        }
    }


    // обновляем пули
    for (var i = 0; i < bullets.length; i++) {
        var bullet = bullets[i];

        switch (bullet.dir) {
            default:
                bullet.pos[0] += bulletSpeed * dt;
        }

        // удаляем вылетевших за пределы экрана пули
        if (bullet.pos[0] > 1200 + 15) {
            bullets.splice(i, 1);
            i--;
        }
    }

    for (var i = 0; i < bossBullets.length; i++) {

        bossBullets[i].pos[0] -= bossBulletSpeed * dt;


        // удаляем вылетевших за пределы экрана пули
        if (bossBullets[i].pos[0] < 0) {
            bossBullets.splice(i, 1);
            i--;
        }

    }

    // обновляем врагов
    for (var i = 0; i < enemies.length; i++) {
        enemies[i].pos[0] -= enemySpeed * dt;
        enemies[i].sprite.update(dt);

        // удаляем вылетевших за пределы экрана
        if (enemies[i].pos[0] + enemies[i].sprite.size[0] < 0) {
            enemies.splice(i, 1);
            i--;
            expl2Sound();
            if (hitPoints.length == 1) {
                gameOver();
            }


            else {

                var s = hitPoints.length;
                hitPoints.pop();
            }
        }
    }
    //облака
    for (var i = 0; i < clouds.length; i++) {
        clouds[i].pos[0] -= cloudSpeed * dt;
        clouds[i].sprite.update(dt);

        // удаляем вылетевших за пределы экрана
        if (clouds[i].pos[0] + clouds[i].sprite.size[0] < 0) {
            clouds.splice(i, 1);
            i--;
        }
    }
    //черные пони
    for (var i = 0; i < blackPonies.length; i++) {
        blackPonies[i].pos[0] -= ponySpeed * dt;
        blackPonies[i].sprite.update(dt);

        // удаляем вылетевших за пределы экрана
        if (blackPonies[i].pos[0] + blackPonies[i].sprite.size[0] < 0) {
            blackPonies.splice(i, 1);
            i--;
        }
    }

    //босс
    for (var i = 0; i < boss.length; i++) {
        if (boss[i].pos[0] > 1000) {
            boss[i].pos[0] -= enemySpeed * dt;
        }
        else {
            if (level == 1) {
                bossMoveFunct1(i, dt)
            }
            else
                bossMoveFunct2(i, dt);
        }
        boss[i].sprite.update(dt);
        // движение первого босса
        if (boss[i].pos[1] < 0) {
            boss[i].pos[1] = 0;
            bossWay = 0;
        }
        if (boss[i].pos[1] + boss[i].sprite.size[1] > 620) {
            boss[i].pos[1] = 620 - boss[i].sprite.size[1];
            bossWay = 1;
        }


    }

    for (var i = 0; i < godBonuses.length; i++) {
        godBonuses[i].pos[0] -= ponySpeed * dt;
        godBonuses[i].sprite.update(dt);

        // удаляем вылетевших за пределы экрана
        if (godBonuses[i].pos[0] + godBonuses[i].sprite.size[0] < 0) {
            godBonuses.splice(i, 1);
            i--;
        }
    }

    // Update all the explosions
    for (var i = 0; i < explosions.length; i++) {
        explosions[i].sprite.update(dt);
        // Remove if animation is done
        if (explosions[i].sprite.done) {
            explosions.splice(i, 1);
            i--;
        }
    }
}

function checkPlayerBounds() {

    if (nextLevelPlayerMove) {
        if (player.pos[0] > 1193) {
            if (level == 4) {
                isGameOver = true;
                loserScreen.src = "resources/winnerScreen.png";
            }
            else {
                nextLevelPlayerMove = false;
                nextLevel();
            }
        }
    }
    else {
        // не даем выйти за границы канваса
        if (player.pos[0] < 0) {
            player.pos[0] = 0;
        }
        else if (player.pos[0] > 1200 - player.sprite.size[0] - 280) {
            player.pos[0] = 1200 - player.sprite.size[0] - 280;
        }

        if (player.pos[1] < 60) {
            player.pos[1] = 60;
        }
        else if (player.pos[1] > 620 - player.sprite.size[1]) {
            player.pos[1] = 620 - player.sprite.size[1];
        }
    }
}
// отрисовка
function render() {
    // if (!isGameOver) {
    ctx.drawImage(background, 0, 0, 1200, 620);
    renderEntities(bgScreens);

    renderEntity(player);
    renderEntities(enemies);
    renderEntities(bullets);
    renderEntities(explosions);
    renderEntities(hitPoints);
    renderEntities(clouds);
    renderEntities(boss);
    renderEntities(bossHitPoints);
    renderEntities(bossBullets);
    renderEntities(bombs);
    renderEntities(blackPonies);
    renderEntities(godBonuses);

    if (pause == true) {
        renderEntities(pauseScreen);
    }
    if ((nextLevelPause) && (!nextLevelPlayerMove)) {
        switch (level) {
            case 1:
                ctx.drawImage(level1Img, 0, 0, 1200, 620);
                break;
            case 2:
                ctx.drawImage(level2Img, 0, 0, 1200, 620);
                break;
            case 3:
                ctx.drawImage(level3Img, 0, 0, 1200, 620);
                break;
            default:
                break;
        }

    }
    // }
    if (isGameOver) {

        ctx.drawImage(background2, 0, 0, 1200, 620);
        ctx.drawImage(loserScreen, 50, 200, 620, 200);

    }

};

function renderEntities(list) {
    for (var i = 0; i < list.length; i++) {
        renderEntity(list[i]);
    }
}
function renderEntity(entity) {
    ctx.save();
    ctx.translate(entity.pos[0], entity.pos[1]);
    entity.sprite.render(ctx);
    ctx.restore();
}
function collides(x, y, r, b, x2, y2, r2, b2) {
    return !(r <= x2 || x > r2 ||
        b <= y2 || y > b2);
}

function boxCollides(pos, size, pos2, size2) {
    return collides(pos[0], pos[1],
            pos[0] + size[0], pos[1] + size[1],
        pos2[0], pos2[1],
            pos2[0] + size2[0], pos2[1] + size2[1]);
}
function checkCollisions() {
    checkPlayerBounds();

//Пули босса
    for (var k = 0; k < bossBullets.length; k++) {
        var pos = bossBullets[k].pos;
        var size = bossBullets[k].sprite.size;
        if (boxCollides(pos, size, player.pos, player.sprite.size)) {
            if (hitPoints.length == 1) {
                gameOver();
            }
            else {

                bossBullets.splice(k, 1);
                k--;

                if (!isPlayerGod) hitPoints.pop();
            }
            explosFunct(pos[0], pos[1])
        }
    }
    for (var k = 0; k < clouds.length; k++) {
        var pos = clouds[k].pos;
        var size = clouds[k].sprite.size;
        if (boxCollides(pos, size, player.pos, player.sprite.size)) {
            score += 300;
            document.getElementById('sc').innerHTML = score;
            clouds.splice(k, 1);
            k--;
            var h = hitPoints.length;
            if (h < 5) {
                hitPoints.push({
                    pos: [20 + 40 * h, 10],
                    sprite: new Sprite(sprites, [0, 200], [40, 40])
                })
            }
        }
    }

    for (var k = 0; k < blackPonies.length; k++) {
        var pos = blackPonies[k].pos;
        var size = blackPonies[k].sprite.size;
        if (boxCollides(pos, size, player.pos, player.sprite.size)) {
            score += 300;
            document.getElementById('sc').innerHTML = score;
            blackPonies.splice(k, 1);
            k--;
            var h = bombs.length;
            if (h < 5) {
                bombs.push({
                    pos: [500 + 50 * h, 10],
                    sprite: new Sprite(bombImg, [0, 0], [80, 80])
                })
            }
        }
    }

    if (bossInPosition) {
        if (boxCollides(boss[0].pos, boss[0].sprite.size, player.pos, player.sprite.size)) {
            gameOver();

        }
    }

//Отстрел черных ппоней
    for (var i = 0; i < blackPonies.length; i++) {  //ooh noooo...black ponies
        for (var j = 0; j < bullets.length; j++)
            if (boxCollides(blackPonies[i].pos, blackPonies[i].sprite.size, bullets[j].pos, bullets[j].sprite.size)) {
                explosFunct(blackPonies[i].pos[0], blackPonies[i].pos[1])
                explosFunct(player.pos[0], player.pos[1])
                blackPonies.splice(i, 1);
                bullets.splice(j, 1);
                for (var i = 0; i < enemies.length; i++) {
                    explosFunct(enemies[i].pos[0], enemies[i].pos[1])
                    enemies.splice(i, 1);
                    i--;
                }
                if (hitPoints.length == 1) {
                    gameOver();
                }
                else hitPoints.pop();
            }
    }

//пули в босса
    if (bossInPosition) {
        for (var j = 0; j < bullets.length; j++) {
            if (boxCollides(boss[0].pos, boss[0].sprite.size, bullets[j].pos, bullets[j].sprite.size)) {
                if (bossHitPoints.length > 1) {
                    bossHitPoints.pop();
                    explosFunct(bullets[j].pos[0], bullets[j].pos[1])
                    bullets.splice(j, 1);
                }
                else {
                    bossHitPoints.pop();
                    explSound();
                    for (var i = 0; i < 10; i++) {
                        explosFunct(boss[0].pos[0] + 10 * i, boss[0].pos[1] + 15 * i)
                    }
                    for (var k = 0; k < bossBullets.length; k++) {
                        explosFunct(bossBullets[k].pos[0], bossBullets[k].pos[1])
                        bossBullets.splice(k, 1);
                        k--;

                    }

                    for (var k = 0; k < enemies.length; k++) {
                        explosFunct(enemies[k].pos[0], enemies[k].pos[1])
                        enemies.splice(k, 1);
                        k--;

                    }


                    bossHitPoints.pop();
                    boss.pop();
                    bossTime = false;
                    bossInPosition = false;
                    nextLevelPause = true;
                    nextLevelPlayerMove = true;
                    nextLevelTimer = Date.now();
                    score += 10000;
                    document.getElementById('sc').innerHTML = score;
                    break;
                }
            }
        }
    }
//враги и пули
    for (var i = 0; i < enemies.length; i++) {
        var pos = enemies[i].pos;
        var size = enemies[i].sprite.size;
        for (var j = 0; j < bullets.length; j++) {
            var pos2 = bullets[j].pos;
            var size2 = bullets[j].sprite.size;
            if (boxCollides(pos, size, pos2, size2)) {
                //удаляем врагов
                explSound();
                score += 100;
                document.getElementById('sc').innerHTML = score;
                enemies.splice(i, 1);
                i--;
                explosFunct(pos[0], pos[1])
                // удаляем пулили
                bullets.splice(j, 1);
                break;
            }
        }
        if (boxCollides(pos, size, player.pos, player.sprite.size)) {
            explosFunct(pos[0], pos[1])
            if ((hitPoints.length == 1) && (!isPlayerGod)) {
                gameOver();
            }
            else {
                enemies.splice(i, 1);
                i--;
                var s = hitPoints.length;
                if (!isPlayerGod)  hitPoints.pop();
            }
        }
    }
    //летающие херовины с бессмертием
    for (var k = 0; k < godBonuses.length; k++) {
        var pos = godBonuses[k].pos;
        var size = godBonuses[k].sprite.size;
        if (boxCollides(pos, size, player.pos, player.sprite.size)) {
            godBonuses.splice(k, 1);
            k--;
            if (!isPlayerGod) {
                isPlayerGod = true;
                timerOfImmortal = Date.now();
                player.sprite = new Sprite(sprites, [240, 240], [80, 80]);
            }
        }
    }
}
function gameOver() {
    bullets = [];
    isGameOver = true;
//restart();
}

function nextLevel() {
    enemies = [];
    bullets = [];
    explosions = [];

    max = 100;
    level += 1;
    enemySpeed += 100;
    gameTime = 0;
    bossTime = false;
    bossTime = false;
    nextLevelPlayerMove = false;
    bossInPosition = false;
    bossLifesGain = false;
    bossBullets = [];
    switch (level) {
        case 2:
            background.src = "resources/bg3.png";
            break;
        case 3:
            background.src = "resources/bg4.png";
            break;
        case 5:
            background.src = "resources/bg4.png";
            sprites.src = "resources/nysprite.png";
            break;
        default:
            break;
    }
    player.pos = [50, canvas.height / 2];


    main();
}

function restart() {
    gameTime = 0;
    score = 0;
    level = 1;
    enemies = [];
    bullets = [];
    bossBullets = [];
    explosions = [];
    clouds = [];
    boss = [];
    pause = false;
    hitPoints = [];
    bossHitPoints = [];
    bombs = [];
    blackPonies = [];
    bgScreens = [];
    background.src = "resources/bg2.png";
    for (var j = 0; j < 2; j++) {//фоны
        bgScreens.push({
            pos: [0 + 2400 * j, 0],
            sprite: new Sprite(background, [0, 0], [2400, 620])
        })
    }
    ;

    for (var j = 0; j < 3; j++) {
        hitPoints.push({
            pos: [20 + 40 * j, 10],
            sprite: new Sprite(sprites, [0, 200], [40, 40])
        })
    }
    for (var j = 0; j < 3; j++) {
        bombs.push({
            pos: [500 + 50 * j, 10],
            sprite: new Sprite(bombImg, [0, 0], [80, 80])
        })
    }


    godBonuses = [];
    player.pos = [50, canvas.height / 2];
    bossTime = false;
    bossTime = false;
    nextLevelPlayerMove = false;
    bossInPosition = false;
    bossLifesGain = false;
    isGameOver = false;
}











